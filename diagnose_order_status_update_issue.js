const axios = require('axios');

// ุฅุนุฏุงุฏุงุช ุงูุงุฎุชุจุงุฑ
const baseURL = 'https://montajati-backend.onrender.com';
const timeout = 60000; // ุฏูููุฉ ูุงุญุฏุฉ

// ุฏุงูุฉ ูุณุงุนุฏุฉ ูุฅุฑุณุงู ุงูุทูุจุงุช
async function makeRequest(method, url, data = null) {
  try {
    const config = {
      method,
      url,
      timeout,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      validateStatus: () => true // ูุจูู ุฌููุน status codes
    };
    
    if (data) {
      config.data = data;
    }
    
    const response = await axios(config);
    
    return {
      success: response.status >= 200 && response.status < 300,
      status: response.status,
      data: response.data,
      headers: response.headers,
      error: response.status >= 400 ? response.data : null
    };
  } catch (error) {
    return {
      success: false,
      error: error.message,
      details: error.response?.data || null
    };
  }
}

// ุฏุงูุฉ ูุทุจุงุนุฉ ุงููุชุงุฆุฌ ุจุดูู ููุธู
function printResult(title, result) {
  console.log(`\n${'='.repeat(60)}`);
  console.log(`๐ ${title}`);
  console.log(`${'='.repeat(60)}`);
  console.log(`โ ูุฌุญ: ${result.success}`);
  console.log(`๐ Status: ${result.status || 'N/A'}`);
  
  if (result.data) {
    console.log(`๐ ุงูุจูุงูุงุช:`);
    console.log(JSON.stringify(result.data, null, 2));
  }
  
  if (result.error) {
    console.log(`โ ุงูุฎุทุฃ:`);
    console.log(JSON.stringify(result.error, null, 2));
  }
}

async function diagnoseOrderStatusUpdateIssue() {
  console.log('๐ ===== ุชุดุฎูุต ูุดููุฉ ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ =====');
  console.log(`โฐ ุงูููุช: ${new Date().toISOString()}`);
  console.log(`๐ Backend URL: ${baseURL}`);
  
  try {
    // 1. ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจุงูู Backend
    console.log('\n1๏ธโฃ === ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจุงูู Backend ===');
    const healthCheck = await makeRequest('GET', `${baseURL}/health`);
    printResult('ูุญุต ุตุญุฉ ุงูุฎุงุฏู', healthCheck);
    
    if (!healthCheck.success) {
      console.log('โ ูุดู ูู ุงูุงุชุตุงู ุจุงูู Backend - ุชููู ุงูุชุดุฎูุต');
      return;
    }
    
    // 2. ุฌูุจ ุทูุจ ููุงุฎุชุจุงุฑ
    console.log('\n2๏ธโฃ === ุฌูุจ ุทูุจ ููุงุฎุชุจุงุฑ ===');
    const ordersResult = await makeRequest('GET', `${baseURL}/api/orders?limit=1`);
    printResult('ุฌูุจ ุงูุทูุจุงุช', ordersResult);
    
    if (!ordersResult.success || !ordersResult.data?.data?.length) {
      console.log('โ ูุง ุชูุฌุฏ ุทูุจุงุช ููุงุฎุชุจุงุฑ - ุฅูุดุงุก ุทูุจ ุฌุฏูุฏ...');
      
      // ุฅูุดุงุก ุทูุจ ุฌุฏูุฏ ููุงุฎุชุจุงุฑ
      const testOrderData = {
        customer_name: 'ุงุฎุชุจุงุฑ ุชุดุฎูุต',
        customer_phone: '07700000000',
        customer_address: 'ุนููุงู ุงุฎุชุจุงุฑ',
        customer_city: 'ุจุบุฏุงุฏ',
        items: [
          {
            product_id: 'test_product',
            product_name: 'ููุชุฌ ุงุฎุชุจุงุฑ',
            quantity: 1,
            price: 1000
          }
        ],
        total_amount: 1000,
        delivery_fee: 5000,
        final_total: 6000,
        payment_method: 'ููุฏุงู ุนูุฏ ุงูุงุณุชูุงู',
        notes: 'ุทูุจ ุงุฎุชุจุงุฑ ูุชุดุฎูุต ูุดููุฉ ุชุญุฏูุซ ุงูุญุงูุฉ'
      };
      
      const createResult = await makeRequest('POST', `${baseURL}/api/orders`, testOrderData);
      printResult('ุฅูุดุงุก ุทูุจ ุงุฎุชุจุงุฑ', createResult);
      
      if (!createResult.success) {
        console.log('โ ูุดู ูู ุฅูุดุงุก ุทูุจ ุงุฎุชุจุงุฑ - ุชููู ุงูุชุดุฎูุต');
        return;
      }
      
      var testOrder = createResult.data.data;
    } else {
      var testOrder = ordersResult.data.data[0];
    }
    
    console.log(`๐ฆ ุทูุจ ุงูุงุฎุชุจุงุฑ: ${testOrder.id}`);
    console.log(`๐ ุงูุญุงูุฉ ุงูุญุงููุฉ: ${testOrder.status}`);
    
    // 3. ุงุฎุชุจุงุฑ ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ
    console.log('\n3๏ธโฃ === ุงุฎุชุจุงุฑ ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ ===');
    
    const testStatuses = [
      'ูุดุท',
      'ููุฏ ุงูุชุญุถูุฑ',
      'ุฌุงูุฒ ููุชูุตูู',
      'ููุฏ ุงูุชูุตูู ุงูู ุงูุฒุจูู (ูู ุนูุฏุฉ ุงูููุฏูุจ)',
      'ุชู ุงูุชุณููู ููุฒุจูู'
    ];
    
    // ุงุฎุชูุงุฑ ุญุงูุฉ ูุฎุชููุฉ ุนู ุงูุญุงูุฉ ุงูุญุงููุฉ
    const newStatus = testStatuses.find(status => status !== testOrder.status) || testStatuses[0];
    
    const updateData = {
      status: newStatus,
      notes: 'ุงุฎุชุจุงุฑ ุชุดุฎูุต ูุดููุฉ ุชุญุฏูุซ ุงูุญุงูุฉ',
      changedBy: 'diagnosis_script'
    };
    
    console.log(`๐ ุชุญุฏูุซ ุงูุญุงูุฉ ูู "${testOrder.status}" ุฅูู "${newStatus}"`);
    console.log(`๐ ุจูุงูุงุช ุงูุชุญุฏูุซ:`, JSON.stringify(updateData, null, 2));
    
    const updateResult = await makeRequest('PUT', `${baseURL}/api/orders/${testOrder.id}/status`, updateData);
    printResult('ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ', updateResult);
    
    // 4. ุงูุชุญูู ูู ุงูุชุญุฏูุซ
    console.log('\n4๏ธโฃ === ุงูุชุญูู ูู ุงูุชุญุฏูุซ ===');
    
    await new Promise(resolve => setTimeout(resolve, 3000)); // ุงูุชุธุงุฑ 3 ุซูุงู
    
    const verifyResult = await makeRequest('GET', `${baseURL}/api/orders/${testOrder.id}`);
    printResult('ุงูุชุญูู ูู ุงูุทูุจ ุงููุญุฏุซ', verifyResult);
    
    if (verifyResult.success && verifyResult.data?.data) {
      const updatedOrder = verifyResult.data.data;
      console.log(`\n๐ ููุงุฑูุฉ ุงูุญุงูุงุช:`);
      console.log(`   ุงูุญุงูุฉ ุงููุฏููุฉ: "${testOrder.status}"`);
      console.log(`   ุงูุญุงูุฉ ุงููุทููุจุฉ: "${newStatus}"`);
      console.log(`   ุงูุญุงูุฉ ุงูุญุงููุฉ: "${updatedOrder.status}"`);
      console.log(`   ุชู ุงูุชุญุฏูุซ: ${updatedOrder.status === newStatus ? 'โ ูุนู' : 'โ ูุง'}`);
    }
    
    // 5. ุงุฎุชุจุงุฑ ุญุงูุงุช ูุฎุชููุฉ
    console.log('\n5๏ธโฃ === ุงุฎุชุจุงุฑ ุญุงูุงุช ูุฎุชููุฉ ===');
    
    const additionalTests = [
      { status: '1', description: 'ุญุงูุฉ ุจุฑูู' },
      { status: 'ูุบูู', description: 'ุญุงูุฉ ุฅุบูุงู' },
      { status: 'ููุบู', description: 'ุญุงูุฉ ุฅูุบุงุก' }
    ];
    
    for (const test of additionalTests) {
      console.log(`\n๐งช ุงุฎุชุจุงุฑ: ${test.description}`);
      
      const testUpdateData = {
        status: test.status,
        notes: `ุงุฎุชุจุงุฑ ${test.description}`,
        changedBy: 'diagnosis_script'
      };
      
      const testResult = await makeRequest('PUT', `${baseURL}/api/orders/${testOrder.id}/status`, testUpdateData);
      console.log(`   ุงููุชูุฌุฉ: ${testResult.success ? 'โ ูุฌุญ' : 'โ ูุดู'}`);
      
      if (!testResult.success) {
        console.log(`   ุงูุฎุทุฃ: ${JSON.stringify(testResult.error, null, 2)}`);
      }
      
      await new Promise(resolve => setTimeout(resolve, 2000)); // ุงูุชุธุงุฑ ุซุงููุชูู
    }
    
    // 6. ุชุญููู ุงูุฃุฎุทุงุก ุงูุดุงุฆุนุฉ
    console.log('\n6๏ธโฃ === ุชุญููู ุงูุฃุฎุทุงุก ุงูุดุงุฆุนุฉ ===');
    
    // ุงุฎุชุจุงุฑ ุทูุจ ุบูุฑ ููุฌูุฏ
    const nonExistentTest = await makeRequest('PUT', `${baseURL}/api/orders/non_existent_order/status`, updateData);
    console.log(`๐ ุงุฎุชุจุงุฑ ุทูุจ ุบูุฑ ููุฌูุฏ: ${nonExistentTest.success ? 'โ ูุฌุญ (ูุดููุฉ!)' : 'โ ูุดู (ุทุจูุนู)'}`);
    
    // ุงุฎุชุจุงุฑ ุจูุงูุงุช ูุงูุตุฉ
    const incompleteTest = await makeRequest('PUT', `${baseURL}/api/orders/${testOrder.id}/status`, {});
    console.log(`๐ ุงุฎุชุจุงุฑ ุจูุงูุงุช ูุงูุตุฉ: ${incompleteTest.success ? 'โ ูุฌุญ (ูุดููุฉ!)' : 'โ ูุดู (ุทุจูุนู)'}`);
    
    console.log('\n๐ฏ ===== ุงูุชูุงุก ุงูุชุดุฎูุต =====');
    console.log('๐ ุชุญูู ูู ุงููุชุงุฆุฌ ุฃุนูุงู ูุชุญุฏูุฏ ุณุจุจ ุงููุดููุฉ');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุชุดุฎูุต:', error.message);
    console.error('๐ ุชูุงุตูู ุงูุฎุทุฃ:', error);
  }
}

// ุชุดุบูู ุงูุชุดุฎูุต
diagnoseOrderStatusUpdateIssue();
