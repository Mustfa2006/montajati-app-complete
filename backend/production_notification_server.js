// ===================================
// ุฎุงุฏู ุงูุฅูุชุงุฌ - ูุธุงู ุงูุฅุดุนุงุฑุงุช ุงููุงูู
// ===================================

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const cron = require('node-cron');

// ุงุณุชูุฑุงุฏ ุงูุฎุฏูุงุช
const { firebaseConfig } = require('./config/firebase');
const SimpleNotificationProcessor = require('./notification_processor_simple');
const OrderStatusSyncService = require('./sync/order_status_sync_service');

class ProductionNotificationServer {
  constructor() {
    this.app = express();
    this.port = process.env.PORT || 3003;
    this.isRunning = false;
    
    // ุชููุฆุฉ ูุนุงูุฌ ุงูุฅุดุนุงุฑุงุช
    this.notificationProcessor = new SimpleNotificationProcessor();
    
    this.setupExpress();
    this.setupRoutes();
  }

  // ===================================
  // ุฅุนุฏุงุฏ Express
  // ===================================
  setupExpress() {
    // ุฅุนุฏุงุฏุงุช ุฃุณุงุณูุฉ
    this.app.use(cors({
      origin: '*',
      methods: ['GET', 'POST', 'PUT', 'DELETE'],
      allowedHeaders: ['Content-Type', 'Authorization']
    }));
    
    this.app.use(express.json({ limit: '10mb' }));
    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));

    // ุชุณุฌูู ุงูุทูุจุงุช
    this.app.use((req, res, next) => {
      console.log(`๐ก ${new Date().toISOString()} - ${req.method} ${req.path}`);
      next();
    });
  }

  // ===================================
  // ุฅุนุฏุงุฏ ุงููุณุงุฑุงุช
  // ===================================
  setupRoutes() {
    // ูุณุงุฑ ุงูุฌุฐุฑ
    this.app.get('/', (req, res) => {
      res.json({
        message: 'ูุธุงู ููุชุฌุงุชู - ุฎุงุฏู ุงูุฅุดุนุงุฑุงุช ๐',
        version: '2.0.0',
        status: 'running',
        timestamp: new Date().toISOString(),
        features: [
          'ูุธุงู ุฅุดุนุงุฑุงุช Firebase',
          'ูุนุงูุฌุฉ ุชููุงุฆูุฉ ููุฅุดุนุงุฑุงุช',
          'ูุฒุงููุฉ ุญุงูุงุช ุงูุทูุจุงุช',
          'ูุฑุงูุจุฉ ูุณุชูุฑุฉ'
        ],
        endpoints: {
          health: '/health',
          fcm_register: 'POST /api/fcm/register',
          fcm_test: 'POST /api/fcm/test-notification',
          fcm_status: 'GET /api/fcm/status/:phone',
          order_update: 'PUT /api/orders/:id/status'
        }
      });
    });

    // ูุณุงุฑ ุงูุตุญุฉ
    this.app.get('/health', (req, res) => {
      res.json({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        services: {
          firebase: firebaseConfig.initialized ? 'active' : 'inactive',
          notifications: this.notificationProcessor ? 'active' : 'inactive',
          database: 'active'
        }
      });
    });

    // ูุณุงุฑุงุช FCM
    const fcmTokensRouter = require('./routes/fcm_tokens');
    this.app.use('/api/fcm', fcmTokensRouter);

    // ูุณุงุฑุงุช ุงูุทูุจุงุช
    const ordersRouter = require('./routes/orders');
    this.app.use('/api/orders', ordersRouter);

    // ูุณุงุฑุงุช ุงููุณุชุฎุฏููู
    const usersRouter = require('./routes/users');
    this.app.use('/api/users', usersRouter);

    // ูุณุงุฑุงุช ุงูููุชุฌุงุช
    const productsRouter = require('./routes/products');
    this.app.use('/api/products', productsRouter);

    // ูุณุงุฑุงุช ุงููุตุงุฏูุฉ
    const authRouter = require('./routes/auth');
    this.app.use('/api/auth', authRouter);

    // ูุณุงุฑ ุงุฎุชุจุงุฑ ุงููุธุงู ุงููุงูู
    this.app.post('/api/test/full-system', async (req, res) => {
      try {
        const { user_phone } = req.body;
        
        if (!user_phone) {
          return res.status(400).json({
            success: false,
            message: 'ุฑูู ุงููุงุชู ูุทููุจ'
          });
        }

        // ุงุฎุชุจุงุฑ ุดุงูู ูููุธุงู
        const testResult = await this.runFullSystemTest(user_phone);
        
        res.json({
          success: true,
          message: 'ุชู ุงุฎุชุจุงุฑ ุงููุธุงู ุจูุฌุงุญ',
          results: testResult
        });
        
      } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงููุธุงู:', error);
        res.status(500).json({
          success: false,
          message: 'ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงููุธุงู',
          error: error.message
        });
      }
    });

    // ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก
    this.app.use((err, req, res, next) => {
      console.error('โ ุฎุทุฃ ูู ุงูุฎุงุฏู:', err);
      res.status(500).json({
        success: false,
        message: 'ุฎุทุฃ ุฏุงุฎูู ูู ุงูุฎุงุฏู',
        error: process.env.NODE_ENV === 'development' ? err.message : 'ุฎุทุฃ ุฏุงุฎูู'
      });
    });

    // ูุนุงูุฌุฉ ุงููุณุงุฑุงุช ุบูุฑ ุงูููุฌูุฏุฉ
    this.app.use('*', (req, res) => {
      res.status(404).json({
        success: false,
        message: 'ุงููุณุงุฑ ุบูุฑ ููุฌูุฏ',
        path: req.originalUrl
      });
    });
  }

  // ===================================
  // ุชููุฆุฉ ุงูุฎุฏูุงุช
  // ===================================
  async initializeServices() {
    try {
      console.log('๐ ุชููุฆุฉ ุฎุฏูุงุช ุงูุฅูุชุงุฌ...');

      // 1. ุชููุฆุฉ Firebase
      console.log('๐ฅ ุชููุฆุฉ Firebase...');
      await firebaseConfig.initialize();
      console.log('โ Firebase ูููุฃ ุจูุฌุงุญ');

      // 2. ุจุฏุก ูุนุงูุฌ ุงูุฅุดุนุงุฑุงุช
      console.log('๐ ุจุฏุก ูุนุงูุฌ ุงูุฅุดุนุงุฑุงุช...');
      this.notificationProcessor.startProcessing();
      console.log('โ ูุนุงูุฌ ุงูุฅุดุนุงุฑุงุช ูุดุท');

      // 3. ุชููุฆุฉ ุฎุฏูุฉ ุงููุฒุงููุฉ
      console.log('๐ ุชููุฆุฉ ุฎุฏูุฉ ุงููุฒุงููุฉ...');
      this.syncService = new OrderStatusSyncService();
      await this.syncService.initialize();
      console.log('โ ุฎุฏูุฉ ุงููุฒุงููุฉ ูููุฃุฉ');

      console.log('โ ุชู ุชููุฆุฉ ุฌููุน ุงูุฎุฏูุงุช ุจูุฌุงุญ');
      
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุชููุฆุฉ ุงูุฎุฏูุงุช:', error);
      throw error;
    }
  }

  // ===================================
  // ุจุฏุก ุงููุฒุงููุฉ ุงูุชููุงุฆูุฉ
  // ===================================
  startAutoSync() {
    // ูุฒุงููุฉ ูู 10 ุฏูุงุฆู
    cron.schedule('*/10 * * * *', async () => {
      try {
        console.log('๐ ุจุฏุก ุงููุฒุงููุฉ ุงูุชููุงุฆูุฉ...');
        if (this.syncService) {
          await this.syncService.syncOrderStatuses();
        }
        console.log('โ ุงูุชูุช ุงููุฒุงููุฉ ุงูุชููุงุฆูุฉ');
      } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุงููุฒุงููุฉ ุงูุชููุงุฆูุฉ:', error);
      }
    });

    console.log('โ ุชู ุชูุนูู ุงููุฒุงููุฉ ุงูุชููุงุฆูุฉ (ูู 10 ุฏูุงุฆู)');
  }

  // ===================================
  // ุงุฎุชุจุงุฑ ุงููุธุงู ุงููุงูู
  // ===================================
  async runFullSystemTest(userPhone) {
    const results = {
      timestamp: new Date().toISOString(),
      tests: {}
    };

    try {
      // 1. ุงุฎุชุจุงุฑ Firebase
      results.tests.firebase = {
        status: firebaseConfig.initialized ? 'pass' : 'fail',
        message: firebaseConfig.initialized ? 'Firebase ูุนูู' : 'Firebase ูุนุทู'
      };

      // 2. ุงุฎุชุจุงุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช
      const { createClient } = require('@supabase/supabase-js');
      const supabase = createClient(
        process.env.SUPABASE_URL,
        process.env.SUPABASE_SERVICE_ROLE_KEY
      );

      const { data, error } = await supabase
        .from('fcm_tokens')
        .select('count')
        .limit(1);

      results.tests.database = {
        status: error ? 'fail' : 'pass',
        message: error ? `ุฎุทุฃ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช: ${error.message}` : 'ูุงุนุฏุฉ ุงูุจูุงูุงุช ุชุนูู'
      };

      // 3. ุงุฎุชุจุงุฑ FCM Token ูููุณุชุฎุฏู
      const { data: tokenData } = await supabase
        .from('fcm_tokens')
        .select('*')
        .eq('user_phone', userPhone)
        .eq('is_active', true);

      results.tests.fcm_token = {
        status: tokenData && tokenData.length > 0 ? 'pass' : 'fail',
        message: tokenData && tokenData.length > 0 
          ? `ุงููุณุชุฎุฏู ูุฏูู ${tokenData.length} FCM token ูุดุท`
          : 'ุงููุณุชุฎุฏู ูุง ูููู FCM token ูุดุท'
      };

      return results;
      
    } catch (error) {
      results.error = error.message;
      return results;
    }
  }

  // ===================================
  // ุจุฏุก ุงูุฎุงุฏู
  // ===================================
  async start() {
    try {
      console.log('๐ ุจุฏุก ุชุดุบูู ุฎุงุฏู ุงูุฅูุชุงุฌ...');
      console.log(`๐ ุงูุจูุฆุฉ: ${process.env.NODE_ENV || 'development'}`);
      console.log(`๐ ุงููููุฐ: ${this.port}`);

      // ุชููุฆุฉ ุงูุฎุฏูุงุช
      await this.initializeServices();

      // ุจุฏุก ุงููุฒุงููุฉ ุงูุชููุงุฆูุฉ
      this.startAutoSync();

      // ุจุฏุก ุงูุฎุงุฏู
      this.app.listen(this.port, () => {
        console.log('\n' + '='.repeat(60));
        console.log('๐ ุฎุงุฏู ุงูุฅูุชุงุฌ ูุนูู ุจูุฌุงุญ!');
        console.log(`๐ ุงูุฑุงุจุท: http://localhost:${this.port}`);
        console.log(`๐ ูุญุต ุงูุตุญุฉ: http://localhost:${this.port}/health`);
        console.log(`๐ฑ ุชุณุฌูู FCM: POST http://localhost:${this.port}/api/fcm/register`);
        console.log(`๐งช ุงุฎุชุจุงุฑ ุงููุธุงู: POST http://localhost:${this.port}/api/test/full-system`);
        console.log('='.repeat(60));
        
        this.isRunning = true;
      });

      // ูุนุงูุฌุฉ ุฅุดุงุฑุงุช ุงูุฅุบูุงู
      process.on('SIGTERM', () => this.gracefulShutdown());
      process.on('SIGINT', () => this.gracefulShutdown());

    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุจุฏุก ุชุดุบูู ุงูุฎุงุฏู:', error);
      process.exit(1);
    }
  }

  // ===================================
  // ุฅุบูุงู ุขูู
  // ===================================
  async gracefulShutdown() {
    console.log('\n๐ ุจุฏุก ุฅุบูุงู ุงูุฎุงุฏู ุจุฃูุงู...');
    
    this.isRunning = false;
    
    // ุฅููุงู ูุนุงูุฌ ุงูุฅุดุนุงุฑุงุช
    if (this.notificationProcessor) {
      this.notificationProcessor.stopProcessing();
    }
    
    console.log('โ ุชู ุฅุบูุงู ุงูุฎุงุฏู ุจุฃูุงู');
    process.exit(0);
  }
}

// ุชุดุบูู ุงูุฎุงุฏู
if (require.main === module) {
  const server = new ProductionNotificationServer();
  server.start().catch(console.error);
}

module.exports = ProductionNotificationServer;
