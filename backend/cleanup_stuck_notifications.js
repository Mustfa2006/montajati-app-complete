// ===================================
// ุชูุธูู ุงูุฅุดุนุงุฑุงุช ุงููุนููุฉ
// Cleanup Stuck Notifications
// ===================================

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

class NotificationCleanup {
  constructor() {
    this.supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    );
  }

  async cleanupStuckNotifications() {
    try {
      console.log('๐งน ุจุฏุก ุชูุธูู ุงูุฅุดุนุงุฑุงุช ุงููุนููุฉ...');

      // 1. ุญุฐู ุงูุฅุดุนุงุฑุงุช ุงููุฏููุฉ (ุฃูุซุฑ ูู 7 ุฃูุงู)
      const sevenDaysAgo = new Date(Date.now() - (7 * 24 * 60 * 60 * 1000)).toISOString();
      
      const { data: oldNotifications, error: deleteOldError } = await this.supabase
        .from('notification_queue')
        .delete()
        .lt('created_at', sevenDaysAgo);

      if (deleteOldError) {
        console.error('โ ุฎุทุฃ ูู ุญุฐู ุงูุฅุดุนุงุฑุงุช ุงููุฏููุฉ:', deleteOldError);
      } else {
        console.log(`โ ุชู ุญุฐู ุงูุฅุดุนุงุฑุงุช ุงููุฏููุฉ (ุฃูุซุฑ ูู 7 ุฃูุงู)`);
      }

      // 2. ุชุญุฏูุซ ุงูุฅุดุนุงุฑุงุช ุงููุนููุฉ ูุฃูุซุฑ ูู ุณุงุนุฉ ุฅูู ูุงุดูุฉ
      const oneHourAgo = new Date(Date.now() - (60 * 60 * 1000)).toISOString();

      const { data: stuckNotifications, error: updateStuckError } = await this.supabase
        .from('notification_queue')
        .update({
          status: 'failed',
          error_message: 'ุชู ุฅูุบุงุก ุงูุฅุดุนุงุฑ ุจุณุจุจ ุงูุชุนููู ููุชุฑุฉ ุทูููุฉ',
          processed_at: new Date().toISOString()
        })
        .eq('status', 'pending')
        .lt('created_at', oneHourAgo);

      if (updateStuckError) {
        console.error('โ ุฎุทุฃ ูู ุชุญุฏูุซ ุงูุฅุดุนุงุฑุงุช ุงููุนููุฉ:', updateStuckError);
      } else {
        console.log(`โ ุชู ุชุญุฏูุซ ุงูุฅุดุนุงุฑุงุช ุงููุนููุฉ ูุฃูุซุฑ ูู ุณุงุนุฉ`);
      }

      // 3. ุฅุนุงุฏุฉ ุชุนููู ุงูุฅุดุนุงุฑุงุช ุงูุชู ุชุฌุงูุฒุช ุงูุญุฏ ุงูุฃูุตู ูููุญุงููุงุช
      const { data: maxRetriedNotifications, error: updateMaxRetriedError } = await this.supabase
        .from('notification_queue')
        .update({
          status: 'failed',
          error_message: 'ุชุฌุงูุฒ ุงูุญุฏ ุงูุฃูุตู ูููุญุงููุงุช',
          processed_at: new Date().toISOString()
        })
        .eq('status', 'pending')
        .gte('retry_count', 3);

      if (updateMaxRetriedError) {
        console.error('โ ุฎุทุฃ ูู ุชุญุฏูุซ ุงูุฅุดุนุงุฑุงุช ุงูุชู ุชุฌุงูุฒุช ุงูุญุฏ ุงูุฃูุตู:', updateMaxRetriedError);
      } else {
        console.log(`โ ุชู ุชุญุฏูุซ ุงูุฅุดุนุงุฑุงุช ุงูุชู ุชุฌุงูุฒุช ุงูุญุฏ ุงูุฃูุตู ูููุญุงููุงุช`);
      }

      // 4. ุฅุญุตุงุฆูุงุช ุงูุชูุธูู
      const { data: stats, error: statsError } = await this.supabase
        .from('notification_queue')
        .select('status')
        .then(result => {
          if (result.error) throw result.error;
          
          const statusCounts = result.data.reduce((acc, notification) => {
            acc[notification.status] = (acc[notification.status] || 0) + 1;
            return acc;
          }, {});
          
          return { data: statusCounts, error: null };
        });

      if (statsError) {
        console.error('โ ุฎุทุฃ ูู ุฌูุน ุงูุฅุญุตุงุฆูุงุช:', statsError);
      } else {
        console.log('๐ ุฅุญุตุงุฆูุงุช ุงูุฅุดุนุงุฑุงุช ุจุนุฏ ุงูุชูุธูู:');
        Object.entries(stats.data).forEach(([status, count]) => {
          console.log(`   - ${status}: ${count}`);
        });
      }

      console.log('โ ุชู ุงูุงูุชูุงุก ูู ุชูุธูู ุงูุฅุดุนุงุฑุงุช');

    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุชูุธูู ุงูุฅุดุนุงุฑุงุช:', error);
    }
  }

  async resetSpecificNotification(notificationId) {
    try {
      console.log(`๐ ุฅุนุงุฏุฉ ุชุนููู ุงูุฅุดุนุงุฑ ${notificationId}...`);

      const { data, error } = await this.supabase
        .from('notification_queue')
        .update({
          status: 'failed',
          error_message: 'ุชู ุฅุนุงุฏุฉ ุชุนููู ุงูุฅุดุนุงุฑ ูุฏููุงู',
          processed_at: new Date().toISOString()
        })
        .eq('id', notificationId);

      if (error) {
        console.error('โ ุฎุทุฃ ูู ุฅุนุงุฏุฉ ุชุนููู ุงูุฅุดุนุงุฑ:', error);
      } else {
        console.log(`โ ุชู ุฅุนุงุฏุฉ ุชุนููู ุงูุฅุดุนุงุฑ ${notificationId}`);
      }

    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฅุนุงุฏุฉ ุชุนููู ุงูุฅุดุนุงุฑ:', error);
    }
  }
}

// ุชุดุบูู ุงูุชูุธูู
if (require.main === module) {
  const cleanup = new NotificationCleanup();
  
  // ุฅุฐุง ุชู ุชูุฑูุฑ ูุนุฑู ุฅุดุนุงุฑ ูุญุฏุฏ
  const notificationId = process.argv[2];
  
  if (notificationId) {
    cleanup.resetSpecificNotification(notificationId).then(() => {
      console.log('โ ุงูุชูู ุฅุนุงุฏุฉ ุชุนููู ุงูุฅุดุนุงุฑ');
      process.exit(0);
    });
  } else {
    cleanup.cleanupStuckNotifications().then(() => {
      console.log('โ ุงูุชูู ุชูุธูู ุงูุฅุดุนุงุฑุงุช');
      process.exit(0);
    });
  }
}

module.exports = NotificationCleanup;
