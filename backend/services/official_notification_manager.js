// ===================================
// ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช ุงูุฑุณูู ุงููุชูุงูู
// Official Notification Manager
// ===================================

const EventEmitter = require('events');
const { firebaseAdminService } = require('./firebase_admin_service');
const targetedNotificationService = require('./targeted_notification_service');
const tokenManagementService = require('./token_management_service');
const { createClient } = require('@supabase/supabase-js');

class OfficialNotificationManager extends EventEmitter {
  constructor() {
    super(); // ุงุณุชุฏุนุงุก EventEmitter constructor
    this.isInitialized = false;
    this.firebaseService = null;
    this.targetedService = null;
    this.tokenService = null;
    this.supabase = null;
    this.stats = {
      totalSent: 0,
      successfulSent: 0,
      failedSent: 0,
      startTime: new Date()
    };
  }

  /**
   * ุชููุฆุฉ ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช
   */
  async initialize() {
    try {
      console.log('๐ฅ ุชููุฆุฉ ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช ุงูุฑุณูู...');

      // ุชููุฆุฉ Supabase
      this.supabase = createClient(
        process.env.SUPABASE_URL,
        process.env.SUPABASE_SERVICE_ROLE_KEY
      );

      // ุชููุฆุฉ ุฎุฏูุฉ Firebase
      this.firebaseService = firebaseAdminService;
      await this.firebaseService.initialize();

      // ุชููุฆุฉ ุฎุฏูุฉ ุงูุฅุดุนุงุฑุงุช ุงููุณุชูุฏูุฉ
      this.targetedService = targetedNotificationService;
      await this.targetedService.initialize();

      // ุชููุฆุฉ ุฎุฏูุฉ ุฅุฏุงุฑุฉ ุงูุฑููุฒ
      this.tokenService = tokenManagementService;
      await this.tokenService.initialize();

      this.isInitialized = true;
      console.log('โ ุชู ุชููุฆุฉ ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช ุจูุฌุงุญ');

      return true;
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุชููุฆุฉ ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช:', error);
      return false;
    }
  }

  /**
   * ุฅุฑุณุงู ุฅุดุนุงุฑ ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ
   */
  async sendOrderStatusNotification(data) {
    try {
      if (!this.isInitialized) {
        throw new Error('ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช ุบูุฑ ูููุฃ');
      }

      const { userPhone, orderId, newStatus, customerName } = data;

      console.log(`๐ฑ ุฅุฑุณุงู ุฅุดุนุงุฑ ุชุญุฏูุซ ุงูุทูุจ ููุนููู: ${userPhone}`);

      // ุฅุฑุณุงู ุงูุฅุดุนุงุฑ
      const result = await this.targetedService.sendOrderStatusNotification(
        userPhone,
        orderId,
        newStatus,
        customerName
      );

      // ุชุญุฏูุซ ุงูุฅุญุตุงุฆูุงุช
      this.stats.totalSent++;
      if (result.success) {
        this.stats.successfulSent++;
      } else {
        this.stats.failedSent++;
      }

      return result;
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฅุฑุณุงู ุฅุดุนุงุฑ ุชุญุฏูุซ ุงูุทูุจ:', error);
      this.stats.totalSent++;
      this.stats.failedSent++;

      // ุฅุฑุณุงู ุญุฏุซ ุฎุทุฃ
      this.emit('error', error);

      return { success: false, error: error.message };
    }
  }

  /**
   * ุฅุฑุณุงู ุฅุดุนุงุฑ ุนุงู ูุน ุชุดุฎูุต ููุตู
   */
  async sendGeneralNotification(data) {
    const notificationDiagnostic = {
      timestamp: new Date().toISOString(),
      notificationId: `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      step: 'ุจุฏุก ุฅุฑุณุงู ุงูุฅุดุนุงุฑ',
      details: {},
      errors: [],
      warnings: [],
      performance: {
        startTime: Date.now()
      }
    };

    try {
      if (!this.isInitialized) {
        notificationDiagnostic.step = 'ูุดู ุงูุชููุฆุฉ';
        notificationDiagnostic.errors.push('ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช ุบูุฑ ูููุฃ');
        throw new Error('ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช ุบูุฑ ูููุฃ');
      }

      const { userPhone, title, message, additionalData } = data;

      notificationDiagnostic.details.userPhone = userPhone;
      notificationDiagnostic.details.title = title;
      notificationDiagnostic.details.message = message;
      notificationDiagnostic.details.additionalData = additionalData;

      console.log(`๐ข [NOTIF-DIAGNOSTIC] ุฅุฑุณุงู ุฅุดุนุงุฑ ุนุงู ููุนููู: ${userPhone}`);
      console.log(`๐ [NOTIF-DIAGNOSTIC] ูุนุฑู ุงูุฅุดุนุงุฑ: ${notificationDiagnostic.notificationId}`);
      console.log(`๐ [NOTIF-DIAGNOSTIC] ุงูุนููุงู: ${title}`);
      console.log(`๐ [NOTIF-DIAGNOSTIC] ุงูุฑุณุงูุฉ: ${message}`);

      notificationDiagnostic.step = 'ุฅุฑุณุงู ุงูุฅุดุนุงุฑ ุนุจุฑ ุงูุฎุฏูุฉ ุงููุณุชูุฏูุฉ';

      // ุฅุฑุณุงู ุงูุฅุดุนุงุฑ
      const result = await this.targetedService.sendGeneralNotification(
        userPhone,
        title,
        message,
        additionalData
      );

      notificationDiagnostic.step = 'ูุนุงูุฌุฉ ูุชูุฌุฉ ุงูุฅุฑุณุงู';
      notificationDiagnostic.performance.endTime = Date.now();
      notificationDiagnostic.performance.totalTime = notificationDiagnostic.performance.endTime - notificationDiagnostic.performance.startTime;
      notificationDiagnostic.details.result = result;

      // ุชุญุฏูุซ ุงูุฅุญุตุงุฆูุงุช
      this.stats.totalSent++;
      if (result.success) {
        this.stats.successfulSent++;
        console.log(`โ [NOTIF-DIAGNOSTIC] ูุฌุญ ุฅุฑุณุงู ุงูุฅุดุนุงุฑ ููุนููู ${userPhone} ูู ${notificationDiagnostic.performance.totalTime}ms`);
      } else {
        this.stats.failedSent++;
        notificationDiagnostic.warnings.push(`ูุดู ุงูุฅุฑุณุงู: ${result.error}`);
        console.log(`โ [NOTIF-DIAGNOSTIC] ูุดู ุฅุฑุณุงู ุงูุฅุดุนุงุฑ ููุนููู ${userPhone}: ${result.error}`);
      }

      notificationDiagnostic.step = 'ุงูุชูุงู ุงูุนูููุฉ';
      result.diagnostic = notificationDiagnostic;

      return result;
    } catch (error) {
      notificationDiagnostic.step = 'ุฎุทุฃ ูู ุงูุนูููุฉ';
      notificationDiagnostic.performance.endTime = Date.now();
      notificationDiagnostic.performance.totalTime = notificationDiagnostic.performance.endTime - notificationDiagnostic.performance.startTime;
      notificationDiagnostic.errors.push({
        type: 'notification_error',
        message: error.message,
        stack: error.stack,
        timestamp: new Date().toISOString()
      });

      console.error(`โ [NOTIF-DIAGNOSTIC] ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฅุดุนุงุฑ ุงูุนุงู ููุนููู ${data.userPhone}:`, error);
      console.error(`๐ [NOTIF-DIAGNOSTIC] ุชุดุฎูุต ุงูุฎุทุฃ:`, JSON.stringify(notificationDiagnostic, null, 2));

      this.stats.totalSent++;
      this.stats.failedSent++;

      // ุฅุฑุณุงู ุญุฏุซ ุฎุทุฃ
      this.emit('error', error);

      return {
        success: false,
        error: error.message,
        diagnostic: notificationDiagnostic
      };
    }
  }

  /**
   * ุงุฎุชุจุงุฑ ุฅุฑุณุงู ุฅุดุนุงุฑ
   */
  async testNotification(userPhone) {
    try {
      if (!this.isInitialized) {
        throw new Error('ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช ุบูุฑ ูููุฃ');
      }

      console.log(`๐งช ุงุฎุชุจุงุฑ ุฅุฑุณุงู ุฅุดุนุงุฑ ููุนููู: ${userPhone}`);

      const result = await this.sendGeneralNotification({
        userPhone,
        title: '๐งช ุฅุดุนุงุฑ ุชุฌุฑูุจู',
        message: 'ูุฐุง ุฅุดุนุงุฑ ุชุฌุฑูุจู ูู ูุธุงู ููุชุฌุงุชู - ุงููุธุงู ูุนูู ุจุดูู ุตุญูุญ!',
        additionalData: {
          type: 'test_notification',
          timestamp: new Date().toISOString()
        }
      });

      return result;
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงูุฅุดุนุงุฑ:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ุงูุฅุดุนุงุฑุงุช
   */
  getStats() {
    const uptime = Date.now() - this.stats.startTime.getTime();
    const uptimeHours = Math.floor(uptime / (1000 * 60 * 60));
    const uptimeMinutes = Math.floor((uptime % (1000 * 60 * 60)) / (1000 * 60));

    return {
      ...this.stats,
      uptime: `${uptimeHours}h ${uptimeMinutes}m`,
      successRate: this.stats.totalSent > 0 
        ? ((this.stats.successfulSent / this.stats.totalSent) * 100).toFixed(2) + '%'
        : '0%',
      isInitialized: this.isInitialized
    };
  }

  /**
   * ุชูุธูู ุงูุฑููุฒ ุงููุฏููุฉ
   */
  async cleanupOldTokens() {
    try {
      if (!this.isInitialized) {
        throw new Error('ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช ุบูุฑ ูููุฃ');
      }

      console.log('๐งน ุชูุธูู ุงูุฑููุฒ ุงููุฏููุฉ...');
      const result = await this.tokenService.cleanupOldTokens();
      console.log('โ ุชู ุชูุธูู ุงูุฑููุฒ ุงููุฏููุฉ ุจูุฌุงุญ');
      return result;
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุชูุธูู ุงูุฑููุฒ:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ุงูุฑููุฒ
   */
  async getTokenStats() {
    try {
      if (!this.isInitialized) {
        throw new Error('ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช ุบูุฑ ูููุฃ');
      }

      return await this.tokenService.getTokenStats();
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ุงูุฑููุฒ:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * ุฌูุจ ุฌููุน ุงููุณุชุฎุฏููู ุงููุดุทูู
   */
  async getAllActiveUsers() {
    try {
      if (!this.isInitialized) {
        throw new Error('ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช ุบูุฑ ูููุฃ');
      }

      console.log('๐ฅ ุฌูุจ ุฌููุน ุงููุณุชุฎุฏููู ุงููุดุทูู...');

      // ุฌูุจ ุงููุณุชุฎุฏููู ูู ุฎุฏูุฉ ุงูุฑููุฒ
      const users = await this.tokenService.getAllActiveUsers();

      console.log(`โ ุชู ุฌูุจ ${users.length} ูุณุชุฎุฏู ูุดุท`);
      return users;
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฌูุจ ุงููุณุชุฎุฏููู ุงููุดุทูู:', error);
      return [];
    }
  }

  /**
   * ุฅุฑุณุงู ุฅุดุนุงุฑ ุฌูุงุนู ูุน ุชุดุฎูุต ุดุงูู
   */
  async sendBulkNotification(notification, users) {
    const bulkDiagnostics = {
      timestamp: new Date().toISOString(),
      bulkId: `bulk_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      step: 'ุจุฏุก ุงูุฅุฑุณุงู ุงูุฌูุงุนู',
      details: {},
      errors: [],
      warnings: [],
      performance: {
        startTime: Date.now(),
        steps: []
      }
    };

    try {
      console.log('๐ข [BULK-DIAGNOSTIC] ุจุฏุก ุฅุฑุณุงู ุฅุดุนุงุฑ ุฌูุงุนู...');
      console.log('๐ [BULK-DIAGNOSTIC] ูุนุฑู ุงูุฅุฑุณุงู ุงูุฌูุงุนู:', bulkDiagnostics.bulkId);

      if (!this.isInitialized) {
        bulkDiagnostics.step = 'ูุดู ุงูุชููุฆุฉ';
        bulkDiagnostics.errors.push('ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช ุบูุฑ ูููุฃ');
        throw new Error('ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช ุบูุฑ ูููุฃ');
      }

      bulkDiagnostics.details.notification = notification;
      bulkDiagnostics.details.usersCount = users.length;
      bulkDiagnostics.details.usersSample = users.slice(0, 3).map(u => ({
        phone: u.phone,
        hasToken: !!u.fcm_token,
        tokenPreview: u.fcm_token ? u.fcm_token.substring(0, 20) + '...' : 'ูุง ููุฌุฏ'
      }));

      console.log(`๐ข [BULK-DIAGNOSTIC] ุฅุฑุณุงู ุฅุดุนุงุฑ ุฌูุงุนู ูู ${users.length} ูุณุชุฎุฏู...`);
      console.log('๐ฆ [BULK-DIAGNOSTIC] ุจูุงูุงุช ุงูุฅุดุนุงุฑ:', notification);
      console.log('๐ฅ [BULK-DIAGNOSTIC] ุนููุฉ ูู ุงููุณุชุฎุฏููู:', bulkDiagnostics.details.usersSample);

      const results = {
        total: users.length,
        successful: 0,
        failed: 0,
        errors: [],
        diagnostics: bulkDiagnostics
      };

      bulkDiagnostics.step = 'ุฅุฑุณุงู ุงูุฅุดุนุงุฑุงุช ุจุดูู ูุชูุงุฒู';
      bulkDiagnostics.performance.steps.push({ step: 'ุจุฏุก ุงูุฅุฑุณุงู ุงููุชูุงุฒู', timestamp: Date.now() });

      // ุฅุฑุณุงู ุงูุฅุดุนุงุฑุงุช ุจุดูู ูุชูุงุฒู ูุน ุชุดุฎูุต ููุตู
      const promises = users.map(async (user, index) => {
        const userDiagnostic = {
          userIndex: index,
          phone: user.phone,
          hasToken: !!user.fcm_token,
          startTime: Date.now()
        };

        try {
          console.log(`๐ฑ [BULK-DIAGNOSTIC] ุฅุฑุณุงู ูููุณุชุฎุฏู ${index + 1}/${users.length}: ${user.phone}`);

          const result = await this.sendGeneralNotification({
            userPhone: user.phone,
            title: notification.title,
            message: notification.body,
            additionalData: notification.data
          });

          userDiagnostic.endTime = Date.now();
          userDiagnostic.duration = userDiagnostic.endTime - userDiagnostic.startTime;
          userDiagnostic.result = result;

          if (result.success) {
            results.successful++;
            console.log(`โ [BULK-DIAGNOSTIC] ูุฌุญ ุงูุฅุฑุณุงู ูููุณุชุฎุฏู ${user.phone} ูู ${userDiagnostic.duration}ms`);
          } else {
            results.failed++;
            results.errors.push({
              user: user.phone,
              error: result.error,
              diagnostic: userDiagnostic
            });
            console.log(`โ [BULK-DIAGNOSTIC] ูุดู ุงูุฅุฑุณุงู ูููุณุชุฎุฏู ${user.phone}: ${result.error}`);
          }

          return result;
        } catch (error) {
          userDiagnostic.endTime = Date.now();
          userDiagnostic.duration = userDiagnostic.endTime - userDiagnostic.startTime;
          userDiagnostic.error = error.message;

          results.failed++;
          results.errors.push({
            user: user.phone,
            error: error.message,
            diagnostic: userDiagnostic
          });

          console.error(`โ [BULK-DIAGNOSTIC] ุฎุทุฃ ูู ุงูุฅุฑุณุงู ูููุณุชุฎุฏู ${user.phone}:`, error);
          return { success: false, error: error.message };
        }
      });

      bulkDiagnostics.step = 'ุงูุชุธุงุฑ ุงูุชูุงุก ุฌููุน ุงูุฅุฑุณุงูุงุช';
      await Promise.all(promises);

      bulkDiagnostics.step = 'ุงูุชูุงู ุงูุฅุฑุณุงู ุงูุฌูุงุนู';
      bulkDiagnostics.performance.endTime = Date.now();
      bulkDiagnostics.performance.totalTime = bulkDiagnostics.performance.endTime - bulkDiagnostics.performance.startTime;
      bulkDiagnostics.details.finalResults = {
        total: results.total,
        successful: results.successful,
        failed: results.failed,
        successRate: ((results.successful / results.total) * 100).toFixed(2) + '%'
      };

      console.log(`โ [BULK-DIAGNOSTIC] ุงูุชูู ุงูุฅุฑุณุงู ุงูุฌูุงุนู - ูุฌุญ: ${results.successful}, ูุดู: ${results.failed}`);
      console.log(`โฑ๏ธ [BULK-DIAGNOSTIC] ุฅุฌูุงูู ุงูููุช: ${bulkDiagnostics.performance.totalTime}ms`);
      console.log(`๐ [BULK-DIAGNOSTIC] ูุนุฏู ุงููุฌุงุญ: ${bulkDiagnostics.details.finalResults.successRate}`);

      if (results.failed > 0) {
        console.log('โ [BULK-DIAGNOSTIC] ุฃุฎุทุงุก ุงูุฅุฑุณุงู:', results.errors.slice(0, 5)); // ุฃูู 5 ุฃุฎุทุงุก ููุท
      }

      return results;
    } catch (error) {
      bulkDiagnostics.step = 'ุฎุทุฃ ุนุงู ูู ุงูุฅุฑุณุงู ุงูุฌูุงุนู';
      bulkDiagnostics.performance.endTime = Date.now();
      bulkDiagnostics.performance.totalTime = bulkDiagnostics.performance.endTime - bulkDiagnostics.performance.startTime;
      bulkDiagnostics.errors.push({
        type: 'bulk_error',
        message: error.message,
        stack: error.stack,
        timestamp: new Date().toISOString()
      });

      console.error('โ [BULK-DIAGNOSTIC] ุฎุทุฃ ูู ุงูุฅุฑุณุงู ุงูุฌูุงุนู:', error);
      console.error('๐ [BULK-DIAGNOSTIC] ุชุดุฎูุต ุดุงูู ููุฎุทุฃ:', JSON.stringify(bulkDiagnostics, null, 2));

      return {
        total: users.length,
        successful: 0,
        failed: users.length,
        errors: [{ error: error.message }],
        diagnostics: bulkDiagnostics
      };
    }
  }

  /**
   * ุญูุธ ุณุฌู ุงูุฅุดุนุงุฑ
   */
  async saveNotificationRecord(data) {
    try {
      console.log('๐พ ุญูุธ ุณุฌู ุงูุฅุดุนุงุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช...');

      const { error } = await this.supabase
        .from('notifications')
        .insert([{
          title: data.title,
          body: data.body,
          type: data.type,
          status: data.status,
          recipients_count: data.recipientsCount,
          delivery_rate: data.results ? Math.floor((data.results.successful / data.results.total) * 100) : 0,
          sent_at: data.sentAt,
          scheduled_for: data.scheduledFor,
          notification_data: {
            isScheduled: data.isScheduled,
            scheduledDateTime: data.scheduledDateTime,
            results: data.results
          },
          created_by: 'admin'
        }]);

      if (error) {
        throw new Error(`ุฎุทุฃ ูู ุญูุธ ุงูุฅุดุนุงุฑ: ${error.message}`);
      }

      console.log('โ ุชู ุญูุธ ุณุฌู ุงูุฅุดุนุงุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
      return { success: true };
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุญูุธ ุณุฌู ุงูุฅุดุนุงุฑ:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * ุฌูุจ ุฅุญุตุงุฆูุงุช ุงูุฅุดุนุงุฑุงุช
   */
  async getNotificationStats() {
    try {
      console.log('๐ ุฌูุจ ุฅุญุตุงุฆูุงุช ุงูุฅุดุนุงุฑุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช...');

      const { data, error } = await this.supabase
        .rpc('get_notification_statistics');

      if (error) {
        console.error('โ ุฎุทุฃ ูู ุฌูุจ ุงูุฅุญุตุงุฆูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
        // ุงูุนูุฏุฉ ููุฅุญุตุงุฆูุงุช ุงููุญููุฉ ูุจุฏูู
        return {
          total_sent: this.stats.totalSent,
          total_delivered: this.stats.successfulSent,
          total_opened: Math.floor(this.stats.successfulSent * 0.3),
          total_clicked: Math.floor(this.stats.successfulSent * 0.15),
        };
      }

      console.log('โ ุชู ุฌูุจ ุงูุฅุญุตุงุฆูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
      return data || {
        total_sent: 0,
        total_delivered: 0,
        total_opened: 0,
        total_clicked: 0,
      };
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฌูุจ ุฅุญุตุงุฆูุงุช ุงูุฅุดุนุงุฑุงุช:', error);
      return {
        total_sent: 0,
        total_delivered: 0,
        total_opened: 0,
        total_clicked: 0,
      };
    }
  }

  /**
   * ุฌูุจ ุชุงุฑูุฎ ุงูุฅุดุนุงุฑุงุช
   */
  async getNotificationHistory() {
    try {
      console.log('๐ ุฌูุจ ุชุงุฑูุฎ ุงูุฅุดุนุงุฑุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช...');

      const { data, error } = await this.supabase
        .rpc('get_notification_history', { limit_count: 50 });

      if (error) {
        console.error('โ ุฎุทุฃ ูู ุฌูุจ ุชุงุฑูุฎ ุงูุฅุดุนุงุฑุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
        return [];
      }

      console.log(`โ ุชู ุฌูุจ ${data?.length || 0} ุฅุดุนุงุฑ ูู ุงูุชุงุฑูุฎ`);
      return data || [];
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฌูุจ ุชุงุฑูุฎ ุงูุฅุดุนุงุฑุงุช:', error);
      return [];
    }
  }

  /**
   * ุฅููุงู ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช
   */
  async shutdown() {
    try {
      console.log('๐ ุฅููุงู ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช...');

      if (this.firebaseService) {
        await this.firebaseService.shutdown();
      }

      if (this.targetedService) {
        await this.targetedService.shutdown();
      }

      if (this.tokenService) {
        await this.tokenService.shutdown();
      }

      this.isInitialized = false;
      console.log('โ ุชู ุฅููุงู ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช ุจูุฌุงุญ');
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฅููุงู ูุฏูุฑ ุงูุฅุดุนุงุฑุงุช:', error);
    }
  }
}

module.exports = OfficialNotificationManager;
