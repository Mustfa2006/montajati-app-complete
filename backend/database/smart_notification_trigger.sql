-- ===================================
-- ูุธุงู ุฅุดุนุงุฑุงุช ุฐูู ูุจูู ุนูู ุชุบููุฑ ุนููุฏ status
-- ===================================

-- ุฅูุดุงุก ุฌุฏูู ุณุฌู ุงูุฅุดุนุงุฑุงุช ุงููุฑุณูุฉ ูุชุฌูุจ ุงูุชูุฑุงุฑ
CREATE TABLE IF NOT EXISTS notification_logs (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    order_id VARCHAR(50) NOT NULL,
    user_phone VARCHAR(20) NOT NULL,
    notification_type VARCHAR(50) NOT NULL,
    status_change VARCHAR(100) NOT NULL,
    title VARCHAR(200) NOT NULL,
    message TEXT NOT NULL,
    fcm_token TEXT,
    firebase_response JSONB,
    sent_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_successful BOOLEAN DEFAULT false,
    error_message TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ุฅูุดุงุก ููุงุฑุณ ููุฃุฏุงุก
CREATE INDEX IF NOT EXISTS idx_notification_logs_order_id ON notification_logs(order_id);
CREATE INDEX IF NOT EXISTS idx_notification_logs_user_phone ON notification_logs(user_phone);
CREATE INDEX IF NOT EXISTS idx_notification_logs_sent_at ON notification_logs(sent_at);

-- ุฅูุดุงุก ุฌุฏูู ูุงุฆูุฉ ุงูุชุธุงุฑ ุงูุฅุดุนุงุฑุงุช
CREATE TABLE IF NOT EXISTS notification_queue (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    order_id VARCHAR(50) NOT NULL,
    user_phone VARCHAR(20) NOT NULL,
    customer_name VARCHAR(255) NOT NULL,
    old_status VARCHAR(50),
    new_status VARCHAR(50) NOT NULL,
    notification_data JSONB NOT NULL,
    priority INTEGER DEFAULT 1,
    max_retries INTEGER DEFAULT 3,
    retry_count INTEGER DEFAULT 0,
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'sent', 'failed')),
    scheduled_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    processed_at TIMESTAMP WITH TIME ZONE,
    error_message TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ุฅูุดุงุก ููุงุฑุณ ููุงุฆูุฉ ุงูุงูุชุธุงุฑ
CREATE INDEX IF NOT EXISTS idx_notification_queue_status ON notification_queue(status);
CREATE INDEX IF NOT EXISTS idx_notification_queue_scheduled_at ON notification_queue(scheduled_at);
CREATE INDEX IF NOT EXISTS idx_notification_queue_priority ON notification_queue(priority);

-- ===================================
-- ุฏุงูุฉ ุฅูุดุงุก ุฑุณุงูุฉ ุงูุฅุดุนุงุฑ ุงูุฐููุฉ
-- ===================================
CREATE OR REPLACE FUNCTION generate_smart_notification_message(
    customer_name VARCHAR(255),
    old_status VARCHAR(50),
    new_status VARCHAR(50)
) RETURNS JSONB AS $$
DECLARE
    notification_data JSONB;
    title TEXT;
    message TEXT;
    emoji TEXT;
    priority INTEGER;
BEGIN
    -- ุชุญุฏูุฏ ุงูุฑุณุงูุฉ ูุงูุฅูููุฌู ุญุณุจ ุงูุญุงูุฉ ุงูุฌุฏูุฏุฉ
    CASE new_status
        WHEN 'in_delivery' THEN
            title := 'ููุฏ ุงูุชูุตูู ๐';
            message := customer_name || ' - ููุฏ ุงูุชูุตูู ๐';
            emoji := '๐';
            priority := 2;
            
        WHEN 'delivered' THEN
            title := 'ุชู ุงูุชูุตูู ๐';
            message := customer_name || ' - ุชู ุงูุชูุตูู ๐';
            emoji := '๐';
            priority := 3;
            
        WHEN 'cancelled' THEN
            title := 'ููุบู ๐ข';
            message := customer_name || ' - ููุบู ๐ข';
            emoji := '๐ข';
            priority := 2;
            
        ELSE
            title := 'ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ';
            message := customer_name || ' - ุชู ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ ุฅูู: ' || new_status;
            emoji := '๐';
            priority := 1;
    END CASE;
    
    -- ุฅูุดุงุก ุจูุงูุงุช ุงูุฅุดุนุงุฑ
    notification_data := jsonb_build_object(
        'title', title,
        'message', message,
        'emoji', emoji,
        'priority', priority,
        'type', 'order_status_change',
        'old_status', old_status,
        'new_status', new_status,
        'customer_name', customer_name,
        'timestamp', EXTRACT(EPOCH FROM NOW())::bigint,
        'sound', 'default',
        'vibration', true
    );
    
    RETURN notification_data;
END;
$$ LANGUAGE plpgsql;

-- ===================================
-- ุฏุงูุฉ ุงูุญุตูู ุนูู ุฑูู ูุงุชู ุงููุณุชุฎุฏู ูู ุงูุทูุจ
-- ===================================
CREATE OR REPLACE FUNCTION get_user_phone_from_order(order_record RECORD)
RETURNS VARCHAR(20) AS $$
DECLARE
    user_phone VARCHAR(20);
BEGIN
    -- ูุญุงููุฉ 1: ูู customer_id ุฅุฐุง ูุงู ููุฌูุฏ
    IF order_record.customer_id IS NOT NULL THEN
        SELECT phone INTO user_phone 
        FROM users 
        WHERE id = order_record.customer_id;
        
        IF user_phone IS NOT NULL THEN
            RETURN user_phone;
        END IF;
    END IF;
    
    -- ูุญุงููุฉ 2: ูู primary_phone ูุจุงุดุฑุฉ
    IF order_record.primary_phone IS NOT NULL THEN
        RETURN order_record.primary_phone;
    END IF;
    
    -- ูุญุงููุฉ 3: ูู customer_phone
    IF order_record.customer_phone IS NOT NULL THEN
        RETURN order_record.customer_phone;
    END IF;
    
    -- ุฅุฐุง ูู ูุฌุฏ ุฃู ุฑูู
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- ===================================
-- ุฏุงูุฉ ุงูุชุญูู ูู ุนุฏู ุชูุฑุงุฑ ุงูุฅุดุนุงุฑ
-- ===================================
CREATE OR REPLACE FUNCTION is_notification_already_sent(
    p_order_id VARCHAR(50),
    p_user_phone VARCHAR(20),
    p_status_change VARCHAR(100)
) RETURNS BOOLEAN AS $$
DECLARE
    notification_count INTEGER;
BEGIN
    -- ุงูุชุญูู ูู ูุฌูุฏ ุฅุดุนุงุฑ ูุฑุณู ุฎูุงู ุขุฎุฑ 5 ุฏูุงุฆู
    SELECT COUNT(*) INTO notification_count
    FROM notification_logs
    WHERE order_id = p_order_id
      AND user_phone = p_user_phone
      AND status_change = p_status_change
      AND sent_at > NOW() - INTERVAL '5 minutes'
      AND is_successful = true;
    
    RETURN notification_count > 0;
END;
$$ LANGUAGE plpgsql;

-- ===================================
-- ุฏุงูุฉ ุฅุถุงูุฉ ุฅุดุนุงุฑ ููุงุฆูุฉ ุงูุงูุชุธุงุฑ
-- ===================================
CREATE OR REPLACE FUNCTION queue_smart_notification()
RETURNS TRIGGER AS $$
DECLARE
    user_phone VARCHAR(20);
    notification_data JSONB;
    status_change_text VARCHAR(100);
    customer_name_safe VARCHAR(255);
BEGIN
    -- ุงูุชุญูู ูู ุชุบููุฑ ุญุงูุฉ ุงูุทูุจ ููุท
    IF OLD.status IS NOT DISTINCT FROM NEW.status THEN
        RETURN NEW;
    END IF;
    
    -- ุงูุญุตูู ุนูู ุฑูู ูุงุชู ุงููุณุชุฎุฏู
    user_phone := get_user_phone_from_order(NEW);
    
    IF user_phone IS NULL THEN
        RAISE NOTICE 'ุชุญุฐูุฑ: ูุง ูููู ุงูุนุซูุฑ ุนูู ุฑูู ูุงุชู ููุทูุจ %', NEW.id;
        RETURN NEW;
    END IF;
    
    -- ุฅุนุฏุงุฏ ุงุณู ุงูุนููู ุงูุขูู
    customer_name_safe := COALESCE(NEW.customer_name, 'ุนููู ุบูุฑ ูุญุฏุฏ');
    
    -- ุฅูุดุงุก ูุต ุชุบููุฑ ุงูุญุงูุฉ
    status_change_text := COALESCE(OLD.status, 'ุบูุฑ ูุญุฏุฏ') || ' -> ' || NEW.status;
    
    -- ุงูุชุญูู ูู ุนุฏู ุชูุฑุงุฑ ุงูุฅุดุนุงุฑ
    IF is_notification_already_sent(NEW.id, user_phone, status_change_text) THEN
        RAISE NOTICE 'ุชู ุชุฌุงูู ุงูุฅุดุนุงุฑ ุงูููุฑุฑ ููุทูุจ % ูุงููุณุชุฎุฏู %', NEW.id, user_phone;
        RETURN NEW;
    END IF;
    
    -- ุฅูุดุงุก ุจูุงูุงุช ุงูุฅุดุนุงุฑ ุงูุฐููุฉ
    notification_data := generate_smart_notification_message(
        customer_name_safe,
        OLD.status,
        NEW.status
    );
    
    -- ุฅุถุงูุฉ ุงูุฅุดุนุงุฑ ููุงุฆูุฉ ุงูุงูุชุธุงุฑ
    INSERT INTO notification_queue (
        order_id,
        user_phone,
        customer_name,
        old_status,
        new_status,
        notification_data,
        priority,
        scheduled_at
    ) VALUES (
        NEW.id,
        user_phone,
        customer_name_safe,
        OLD.status,
        NEW.status,
        notification_data,
        (notification_data->>'priority')::INTEGER,
        NOW()
    );
    
    RAISE NOTICE 'ุชู ุฅุถุงูุฉ ุฅุดุนุงุฑ ุฐูู ููุงุฆูุฉ ุงูุงูุชุธุงุฑ: ุงูุทูุจ=% ุงููุณุชุฎุฏู=% ุงูุญุงูุฉ=%', 
                 NEW.id, user_phone, status_change_text;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ===================================
-- ุฅูุดุงุก Trigger ุฐูู ููุฑุงูุจุฉ ุชุบููุฑ status
-- ===================================
DROP TRIGGER IF EXISTS smart_notification_trigger ON orders;

CREATE TRIGGER smart_notification_trigger
    AFTER UPDATE ON orders
    FOR EACH ROW
    WHEN (OLD.status IS DISTINCT FROM NEW.status)
    EXECUTE FUNCTION queue_smart_notification();

-- ===================================
-- ุฏุงูุฉ ุชูุธูู ุงูุณุฌูุงุช ุงููุฏููุฉ
-- ===================================
CREATE OR REPLACE FUNCTION cleanup_old_notification_data()
RETURNS void AS $$
BEGIN
    -- ุญุฐู ุณุฌูุงุช ุงูุฅุดุนุงุฑุงุช ุงูุฃูุฏู ูู 30 ููู
    DELETE FROM notification_logs 
    WHERE created_at < NOW() - INTERVAL '30 days';
    
    -- ุญุฐู ุงูุฅุดุนุงุฑุงุช ุงููุฑุณูุฉ ูู ูุงุฆูุฉ ุงูุงูุชุธุงุฑ ุงูุฃูุฏู ูู 7 ุฃูุงู
    DELETE FROM notification_queue 
    WHERE status = 'sent' AND processed_at < NOW() - INTERVAL '7 days';
    
    -- ุญุฐู ุงูุฅุดุนุงุฑุงุช ุงููุงุดูุฉ ุงูุฃูุฏู ูู 3 ุฃูุงู
    DELETE FROM notification_queue 
    WHERE status = 'failed' AND created_at < NOW() - INTERVAL '3 days';
    
    RAISE NOTICE 'ุชู ุชูุธูู ุงูุจูุงูุงุช ุงููุฏููุฉ ููุฅุดุนุงุฑุงุช';
END;
$$ LANGUAGE plpgsql;

-- ุฅูุดุงุก ูููุฉ ุชูุธูู ุชููุงุฆูุฉ (ุฅุฐุง ูุงู pg_cron ูุชุงุญ)
-- SELECT cron.schedule('cleanup-notifications', '0 2 * * *', 'SELECT cleanup_old_notification_data();');

RAISE NOTICE 'โ ุชู ุฅูุดุงุก ูุธุงู ุงูุฅุดุนุงุฑุงุช ุงูุฐูู ุจูุฌุงุญ!';
